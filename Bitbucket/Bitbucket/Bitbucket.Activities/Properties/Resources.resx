<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ContinueOnError_Description" xml:space="preserve">
    <value>If set, continue executing the remaining activities even if the current activity has failed.</value>
    <comment>property description</comment>
  </data>
  <data name="ContinueOnError_DisplayName" xml:space="preserve">
    <value>ContinueOnError</value>
    <comment>property name</comment>
  </data>
  <data name="Timeout_Description" xml:space="preserve">
    <value>Specifies the amount of time (in milliseconds) to wait for the activity to run before an error is thrown. The default value is 60000 (1 minute).</value>
    <comment>property description</comment>
  </data>
  <data name="Timeout_DisplayName" xml:space="preserve">
    <value>Timeout (milliseconds)</value>
    <comment>property name</comment>
  </data>
  <data name="Timeout_Error" xml:space="preserve">
    <value>The activity timed out and was canceled.</value>
    <comment>error message</comment>
  </data>
  <data name="Do" xml:space="preserve">
    <value>Do</value>
    <comment>generic</comment>
  </data>
  <data name="Common_Category" xml:space="preserve">
    <value>Common</value>
    <comment>category</comment>
  </data>
  <data name="Authentication_Category" xml:space="preserve">
    <value>Authentication</value>
    <comment>category</comment>
  </data>
  <data name="Input_Category" xml:space="preserve">
    <value>Input</value>
    <comment>category</comment>
  </data>
  <data name="Output_Category" xml:space="preserve">
    <value>Output</value>
    <comment>category</comment>
  </data>
  <data name="Options_Category" xml:space="preserve">
    <value>Options</value>
    <comment>category</comment>
  </data>
  <data name="ValidationScope_Error" xml:space="preserve">
    <value>Cannot be used outside of a {0}.</value>
    <comment>error message; {0} is a container activity (e.g. a scope)</comment>
  </data>
  <data name="ValidationValue_Error" xml:space="preserve">
    <value>Please provide a value for {0}.</value>
    <comment>error message; {0} is the name of a missing property</comment>
  </data>
  <data name="ValidationExclusiveProperties_Error" xml:space="preserve">
    <value>Please provide a value either for {0} or {1}, but not both.</value>
    <comment>error message; {0} &amp; {1} are mutually exclusive activities</comment>
  </data>
  <data name="ValidationOverloadGroup_Error" xml:space="preserve">
    <value>Please provide values for both {0} and {1}.</value>
    <comment>error message; {0} &amp; {1} are complementary properties</comment>
  </data>
  <data name="BitbucketAPIScope_DisplayName" xml:space="preserve">
    <value>Bitbucket API Scope</value>
    <comment>activity name</comment>
  </data>
  <data name="BitbucketAPIScope_Description" xml:space="preserve">
    <value>Authorises all Bitbucket activites within the scope.</value>
    <comment>activity description</comment>
  </data>
  <data name="BitbucketAPIScope_AccountUsername_DisplayName" xml:space="preserve">
    <value>Account Username</value>
    <comment>property name</comment>
  </data>
  <data name="BitbucketAPIScope_AccountUsername_Description" xml:space="preserve">
    <value>The Username you use for your Bitbucket account.</value>
    <comment>property description</comment>
  </data>
  <data name="BitbucketAPIScope_AppPassword_DisplayName" xml:space="preserve">
    <value>App Password</value>
    <comment>property name</comment>
  </data>
  <data name="BitbucketAPIScope_AppPassword_Description" xml:space="preserve">
    <value>The App Password you have configured in your Bitbucket account.</value>
    <comment>property description</comment>
  </data>
  <data name="GetRepositories_DisplayName" xml:space="preserve">
    <value>Get Repositories</value>
    <comment>activity name</comment>
  </data>
  <data name="GetRepositories_Description" xml:space="preserve">
    <value>Get all repositories from the configured Bitbucket account in the scope activity.</value>
    <comment>activity description</comment>
  </data>
  <data name="GetRepositories_RepositoriesJObject_DisplayName" xml:space="preserve">
    <value>Repositories (JObject)</value>
    <comment>property name</comment>
  </data>
  <data name="GetRepositories_RepositoriesJObject_Description" xml:space="preserve">
    <value>A paginated JObject output of repositories.</value>
    <comment>property description</comment>
  </data>
  <data name="ManageRepository_DisplayName" xml:space="preserve">
    <value>Manage Repository</value>
    <comment>activity name</comment>
  </data>
  <data name="ManageRepository_Description" xml:space="preserve">
    <value>Perform actions on a repository like create, delete, and read.</value>
    <comment>activity description</comment>
  </data>
  <data name="ManageRepository_WorkspaceUUIDOrSlug_DisplayName" xml:space="preserve">
    <value>Workspace UUID or Slug</value>
    <comment>property name</comment>
  </data>
  <data name="ManageRepository_WorkspaceUUIDOrSlug_Description" xml:space="preserve">
    <value>The Universally Unique Identifier (UUID) of the workspace or slug.
Examples:
UUID: 11111111-1111-1111-1111-111111111111
Slug: myWorkspace</value>
    <comment>property description</comment>
  </data>
  <data name="ManageRepository_RepositoryUUIDOrSlug_DisplayName" xml:space="preserve">
    <value>Repository UUID or Slug</value>
    <comment>property name</comment>
  </data>
  <data name="ManageRepository_RepositoryUUIDOrSlug_Description" xml:space="preserve">
    <value>The Universally Unique Identifier (UUID) of the repository or slug.
Examples:
UUID: 11111111-1111-1111-1111-111111111111
Slug: test-repo</value>
    <comment>property description</comment>
  </data>
  <data name="ManageRepository_JsonResult_DisplayName" xml:space="preserve">
    <value>JSON Result</value>
    <comment>property name</comment>
  </data>
  <data name="ManageRepository_JsonResult_Description" xml:space="preserve">
    <value>The result returned from the action performed in JSON format.</value>
    <comment>property description</comment>
  </data>
  <data name="ManageRepository_Action_DisplayName" xml:space="preserve">
    <value>Action</value>
    <comment>property name</comment>
  </data>
  <data name="ManageRepository_Action_Description" xml:space="preserve">
    <value>The action to be performed. Read repository (GET), Create Repository (PUT), Delete Repository (DELETE).
When creating a repository, use a slug and not a UUID.</value>
    <comment>property description</comment>
  </data>
  <data name="GetRepositories_WorkspaceUUIDOrSlug_Description" xml:space="preserve">
    <value>The Universally Unique Identifier (UUID) of the workspace or slug
Examples:
UUID: 11111111-1111-1111-1111-111111111111
Slug: myWorkspace</value>
    <comment>property description</comment>
  </data>
  <data name="GetRepositories_WorkspaceUUIDOrSlug_DisplayName" xml:space="preserve">
    <value>Workspace UUID or Slug</value>
    <comment>property name</comment>
  </data>
  <data name="CommitFile_DisplayName" xml:space="preserve">
    <value>Commit File</value>
    <comment>activity name</comment>
  </data>
  <data name="CommitFile_Description" xml:space="preserve">
    <value>Commit a file to the specified repository location with a commit message.</value>
    <comment>activity description</comment>
  </data>
  <data name="CommitFile_RepositoryLocation_DisplayName" xml:space="preserve">
    <value>Repository Location</value>
    <comment>property name</comment>
  </data>
  <data name="CommitFile_RepositoryLocation_Description" xml:space="preserve">
    <value>A file path that includes the file name that will be created in the repository. This can also include any number of folder and subfolders.
Example: /myFolder/myFileName.txt</value>
    <comment>property description</comment>
  </data>
  <data name="CommitFile_FileToUpload_DisplayName" xml:space="preserve">
    <value>File To Upload</value>
    <comment>property name</comment>
  </data>
  <data name="CommitFile_FileToUpload_Description" xml:space="preserve">
    <value>The pointer to the file you want to be commit to the repository from your local system.</value>
    <comment>property description</comment>
  </data>
  <data name="CommitFile_CommitMessage_DisplayName" xml:space="preserve">
    <value>Commit Message</value>
    <comment>property name</comment>
  </data>
  <data name="CommitFile_CommitMessage_Description" xml:space="preserve">
    <value>The commit message for this file commit.</value>
    <comment>property description</comment>
  </data>
  <data name="CommitFile_RepositoryUUIDOrSlug_Description" xml:space="preserve">
    <value>The Universally Unique Identifier (UUID) of the repository or slug.
Examples:
UUID: 11111111-1111-1111-1111-111111111111
Slug: test-repo</value>
    <comment>property description</comment>
  </data>
  <data name="CommitFile_RepositoryUUIDOrSlug_DisplayName" xml:space="preserve">
    <value>Repository UUID or Slug</value>
    <comment>property name</comment>
  </data>
  <data name="CommitFile_WorkspaceUUIDOrSlug_Description" xml:space="preserve">
    <value>The Universally Unique Identifier (UUID) of the workspace or slug.
Examples:
UUID: 11111111-1111-1111-1111-111111111111
Slug: myWorkspace</value>
    <comment>property description</comment>
  </data>
  <data name="CommitFile_WorkspaceUUIDOrSlug_DisplayName" xml:space="preserve">
    <value>Workspace UUID or Slug</value>
    <comment>property name</comment>
  </data>
  <data name="CommitFile_JsonResult_Description" xml:space="preserve">
    <value>The result (if any) returned from the action performed in JSON format.</value>
    <comment>property description</comment>
  </data>
  <data name="CommitFile_JsonResult_DisplayName" xml:space="preserve">
    <value>JSON Result</value>
    <comment>property name</comment>
  </data>
  <data name="CommitFile_BranchName_Description" xml:space="preserve">
    <value>The name of the branch that the new commit should be created on. When omitted, the commit will be created on top of the main branch and will become the main branch's new head.</value>
    <comment>property description</comment>
  </data>
  <data name="CommitFile_BranchName_DisplayName" xml:space="preserve">
    <value>Branch Name (Optional)</value>
    <comment>property name</comment>
  </data>
  <data name="ValidationValue_Error_CommitFile_BranchName" xml:space="preserve">
    <value>The branch name must not be a zero-length string. Leave the field blank or enter a valid name.</value>
    <comment>error message</comment>
  </data>
  <data name="ManageRepository_Action_Hint" xml:space="preserve">
    <value>Select the action to be performed.</value>
    <comment>hint</comment>
  </data>
  <data name="GetWorkspaces_DisplayName" xml:space="preserve">
    <value>Get Workspaces</value>
    <comment>activity name</comment>
  </data>
  <data name="GetWorkspaces_Description" xml:space="preserve">
    <value>Gets all workspaces from the configured Bitbucket account in the scope.</value>
    <comment>activity description</comment>
  </data>
  <data name="GetWorkspaces_WorkspacesJObject_Description" xml:space="preserve">
    <value>A paginated JObject output of workspaces.</value>
    <comment>property description</comment>
  </data>
  <data name="GetWorkspaces_WorkspacesJObject_DisplayName" xml:space="preserve">
    <value>Workspaces (JObject)</value>
    <comment>property name</comment>
  </data>
  <data name="GetRepositories_RepositoriesSlugList_Description" xml:space="preserve">
    <value>A list of repository slugs.</value>
    <comment>property description</comment>
  </data>
  <data name="GetRepositories_RepositoriesSlugList_DisplayName" xml:space="preserve">
    <value>Repository Slugs (List&lt;string&gt;)</value>
    <comment>property name</comment>
  </data>
  <data name="GetWorkspaces_WorkspacesSlugList_Description" xml:space="preserve">
    <value>A list workspace slugs.</value>
    <comment>property description</comment>
  </data>
  <data name="GetWorkspaces_WorkspacesSlugList_DisplayName" xml:space="preserve">
    <value>Workspace Slugs (List&lt;string&gt;)</value>
    <comment>property name</comment>
  </data>
  <data name="GetRepositories_RepositoriesUUIDList_Description" xml:space="preserve">
    <value>A list of repository Universally Unique Identifiers (UUIDs).</value>
    <comment>property description</comment>
  </data>
  <data name="GetRepositories_RepositoriesUUIDList_DisplayName" xml:space="preserve">
    <value>Repository UUIDs (List&lt;string&gt;)</value>
    <comment>property name</comment>
  </data>
  <data name="GetWorkspaces_WorkspacesUUIDList_Description" xml:space="preserve">
    <value>A list of workspace Universally Unique Identifiers (UUIDs).</value>
    <comment>property description</comment>
  </data>
  <data name="GetWorkspaces_WorkspacesUUIDList_DisplayName" xml:space="preserve">
    <value>Workspace UUIDs (List&lt;string&gt;)</value>
    <comment>property name</comment>
  </data>
  <data name="ValidationValue_Error_ManageRepository_RepositoryUUIDOrSlug" xml:space="preserve">
    <value>The repository UUID or Slug must not be a zero-length string. Enter a valid value.</value>
    <comment>error message</comment>
  </data>
  <data name="ValidationValue_Error_ManageRepository_RepositoryUUIDOrSlug_NotUUID" xml:space="preserve">
    <value>When creating a repository, the "Repository UUID or Slug" value must be a slug and cannot be a UUID.</value>
  </data>
</root>